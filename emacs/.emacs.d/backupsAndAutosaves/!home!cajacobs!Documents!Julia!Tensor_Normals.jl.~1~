### Finding normals using RBFs and tensors

## Including used packages
using LinearAlgebra
using SparseArrays
using NearestNeighbors
using Plots
using BenchmarkTools
gr()


## Function definitions
# Circle
circX(t) = cos.(t);
circY(t) = sin.(t);

# True circle normals
circNormsX(t) = cos.(t);
circNormsY(t) = sin.(t);

## Generate node set given x and y coordinate sets
function dist(x, y)
    [x'; y']
end

## Functions for generating approximate normals using a sorted node
## distribution
# Master function for finding normals
function normals(nodes)
    # Number of nodes
    N = size(nodes,2);
    nmls = zeros(2,N);
    
    # First Node
    tmp = nodes[:,2] - nodes[:,N];
    tmp = rot90(tmp);
    nmls[:,1] = nodes[:,1] + tmp;

    # Middle Nodes
    for i ∈ 2:N-1
        tmp = nodes[:,i+1] - nodes[:, i-1];
        tmp = rot90(tmp);
        nmls[:,i] = nodes[:,i] + tmp;
    end

    # Last Node
    tmp = nodes[:,1] - nodes[:,N-1];
    tmp = rot90(tmp);
    nmls[:,N] = nodes[:,N] + tmp;

    return nmls
end

# Function that rotates vectors -π/2
function rot90(vec)
    tmp = zeros(2);
    tmp[1] = vec[2];
    tmp[2] = -vec[1];
    return tmp
end

## Find indices for k nearest neighbors
function knnFull(nodes, n)
    kdtree = KDTree(nodes);
    idx, tmp = knn(kdtree, nodes, n);
    return idx
end

## Functions for setting up RBF envrionment
# Center main node
function center(nodes)
    
end

## RBF related functions
# RBF definitons
# Gaussian
phi(x1,y1,x2,y2,m) = ℯ^(-m*((x1-x2)^2+(y1-y2)^2));
phi_x(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(x2-x1);
phi_y(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(y2-y1);

## Plot functions
# Plot of nodes and vectors
function vectorPlot(points, direction)
    N = size(points, 2);
    vecs = points + 0.1 * direction;
    a = scatter(points[1,:],points[2,:],
            aspectratio = :equal,
            legend = false,
            show = false,
            markerstrokealpha = 0,
                markeralpha = .9);
    for i ∈ 1:N
        plot!([points[1,i], vecs[1,i]],
          [points[2,i], vecs[2,i]],
          color = :red,
          legend = false,
          show = false)
    end
    return a
end

## Main function for finding normals
function comp(N, n, m)
    # Parameterizing our curve
    t = range(0,2*π-2*π/N, length = N);

    # Compute true normals
    truNorms = [circNormsX(t)'; circNormsY(t)'];

    # Generate nodes
    nodes = dist[circX(t), circY(t)]

    # Compute approximate normals
    nmls = normals(nodes);
end
