### Finding normals using RBFs and tensors

## Including used packages
using LinearAlgebra
using SparseArrays
using NearestNeighbors
using Plots
using BenchmarkTools
gr()


## Function definitions
# Circle
circX(t) = cos.(t);
circY(t) = sin.(t);

# True circle normals
circNormsX(t) = cos.(t);
circNormsY(t) = sin.(t);

## Generate node set given x and y coordinate sets
function dist(x, y)
    [x'; y']
end

## Functions for generating approximate normals using a sorted node1
## distribution
# Master function for finding normals
function normals(nodes)
    # Number of nodes
    N = size(nodes,2);
    nmls = zeros(2,N);
    
    # First Node
    tmp = nodes[:,2] - nodes[:,N];
    tmp = rot90(tmp);
    nmls[:,1] = nodes[:,1] + tmp;

    # Middle Nodes
    for i ∈ 2:N-1
        tmp = nodes[:,i+1] - nodes[:, i-1];
        tmp = rot90(tmp);
        nmls[:,i] = nodes[:,i] + tmp;
    end

    # Last Node
    tmp = nodes[:,1] - nodes[:,N-1];
    tmp = rot90(tmp);
    nmls[:,N] = nodes[:,N] + tmp;

    return nmls
end

# Function that rotates vectors -π/2
function rot90(vec)
    tmp = zeros(2);
    tmp[1] = vec[2];
    tmp[2] = -vec[1];
    
    return tmp
end

## Find indices for k nearest neighbors
function knnFull(nodes, n)
    kdtree = KDTree(nodes);
    idx, tmp = knn(kdtree, nodes, n, true);
    
    return idx
end

## Functions for setting up RBF envrionment
# Center main node
function center(nodes)
    nodes = nodes .- nodes[:,1];

    return nodes
end

# Finds angle between center vector and ĵ
function findAngle(node)
    b = node[2]/norm(node);
    θ = sign(node[1])acos(b);
    
    return θ
end

# Rotate nodes about origin
function rotate(nodes, θ)
    # Compute rotation matrix
    rotor = [cos(θ) -sin(θ);
             sin(θ) cos(θ)];
    # Rotate all vectors
    nodes = rotor*nodes;
    
    return nodes
end


## RBF related functions
# RBF definitons
# Gaussian 1D
ϕ(x1,x2,m) = ℯ^(-m*abs2(x1-x2));

# Gaussian 2D
ϕ(x1,y1,x2,y2,m) = ℯ^(-m*((x1-x2)^2+(y1-y2)^2));
ϕ_x(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(x2-x1);
ϕ_y(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(y2-y1);

# Interpolation weights for 1D
function interpolate(nodes, m)
    n = size(nodes, 2);
    A = zeros(n,n);
    b = zeros(n);
    x = nodes[1,:];
    f = nodes[2,:];
    
    # Define A
    for i ∈ 1:n, j ∈ 1:n
        A[i,j] = ϕ(x[i], x[j], m);
    end

    λ = A\f;
end

# Interpolation function
function S(t, x, λ, m)
    n = size(x,1);
    nt = size(t,1);
    
    s = zeros(nt);
    for i ∈ 1:n, j ∈ 1:nt
        s[j] += λ[i]*ϕ(t[j], x[i], m);
    end

    return s
end 

## Plot functions
# Plot of nodes and vectors
function vectorPlot(points, direction)
    N = size(points, 2);
    vecs = points + 0.1 * direction;
    a = scatter(points[1,:],points[2,:],
            aspectratio = :equal,
            legend = false,
            show = false,
            markerstrokealpha = 0,
                markeralpha = .9);
    for i ∈ 1:N
        plot!([points[1,i], vecs[1,i]],
          [points[2,i], vecs[2,i]],
          color = :red,
          legend = false,
          show = false)
    end
    return a
end

# Nodes plot
function nodePlot(set1, set2)
    a = scatter(set1[1,:],set1[2,:],
                color = :blue,
                aspectratio = :equal,
                show = false,
                legend = false,
                markerstrokealpha = 0,
                markeralpha = 0.5,
                markersize = 2)
    scatter!(set2[1,:], set2[2,:],
             color = :green,
             show = false,
             legend = false,
             markerstrokealpha = 0,
             markeralpha = 0.3,
             markersize = 2)
    return a
end

# RBF interpolation plot
function interPlot(nodes, λ, m)
    x = nodes[1,:];
    y = nodes[2,:];
    t = range(minimum(x), maximum(x), length = 100);
    s = S(t, x, λ, m);
    
    a = scatter(x,y,
                color = :blue,
                show = false,
                legend = false,
                markersize = 2)
    plot!(t,s)

    return a
end 

## Main function for finding normals
function comp(N=100, n=10, m1=0.5, m2=0.5)
    # Parameterizing our curve
    t = range(0,2*π-2*π/N, length = N);
    
    # Compute true normals
    truNorms = [circNormsX(t)'; circNormsY(t)'];
    
    # Generate nodes
    nodes = dist(circX(t), circY(t))
    
    # Compute approximate normals
    nmls = normals(nodes);
    
    idx = knnFull(nodes, n);
end
