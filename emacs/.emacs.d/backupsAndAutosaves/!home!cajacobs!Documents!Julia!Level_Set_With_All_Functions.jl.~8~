### Level set code for finding normals of a curve ###

## Including used packages
using LinearAlgebra
using SparseArrays
using NearestNeighbors
using Plots
gr()

### Function Definitions
# Circle
circX(t) = cos.(t);
circY(t) = sin.(t);

# True Circle Normals
circNormsX(t) = cos.(t);
circNormsY(t) = sin.(t);

# Function for generating outer nodes from node distribution
function outerDist(nodes)
    N = size(nodes,2);
    oNodes = zeros(2,N);

    # First Node
    tmp = nodes[:,2] - nodes[:,N];
    tmp = rot90(tmp);
    oNodes[:,1] = nodes[:,1] + tmp;

    # Middle Nodes
    for i ∈ 2:N-1
        tmp = nodes[:,i+1] - nodes[:, i-1];
        tmp = rot90(tmp);
        oNodes[:,i] = nodes[:,i] + tmp;
    end

    # Last Node
    tmp = nodes[:,1] - nodes[:,N-1];
    tmp = rot90(tmp);
    oNodes[:,N] = nodes[:,N] + tmp;

    return oNodes
end

## Nodes
function dist(x, y)
    [x'; y']
end

## Outside Nodes
# Function that rotates vectors -π/2
function rot90(vec)
    tmp = zeros(2);
    tmp[1] = vec[2];
    tmp[2] = -vec[1];
    return tmp
end

# RBF Definitions
# Gaussian
phi(x1,y1,x2,y2,m) = ℯ^(-m*((x1-x2)^2+(y1-y2)^2));
phi_x(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(x2-x1);
phi_y(x1,y1,x2,y2,m) = 2*ℯ^(-m*((x1-x2)^2+(y1-y2)^2))*m*(y2-y1);

## Plots
# Plot of Nodes and Vectors
function vectorPlot(points, direction)
    N = size(points, 2);
    vecs = points + 0.1 * direction;
    a = scatter(points[1,:],points[2,:],
            aspectratio = :equal,
            legend = false,
            show = false,
            markerstrokealpha = 0,
                markeralpha = .9);
    for i ∈ 1:N
        plot!([points[1,i], vecs[1,i]],
          [points[2,i], vecs[2,i]],
          color = :red,
          legend = false,
          show = false)
    end
    return a
end

# Nodes Plot
function nodePlot(set1, set2)
    a = scatter(set1[1,:],set1[2,:],
                color = :blue,
                aspectratio = :equal,
                show = false,
                legend = false,
                markerstrokealpha = 0,
                markeralpha = 0.5,
                markersize = 2)
    scatter!(set2[1,:], set2[2,:],
             color = :green,
             show = false,
             legend = false,
             markerstrokealpha = 0,
             markeralpha = 0.3,
             markersize = 2)
    return a
end

function knnFull(nodes, n)
    kdtree = KDTree(nodes);
    idx, tmp = knn(kdtree, nodes, n);
    return idx
end


## D Matrix Populator
function populateD(nodes, n, m)
    N = size(nodes,2);
    idx = knnFull(nodes, n);

    Dx = zeros(N,N);
    Dy = zeros(N,N);
    for k = 1:N
        A = zeros(n,n);
        nds = nodes[:,idx[k]];
        
        # Define A
        for i ∈ 1:n, j ∈ 1:n
                A[i,j] = phi(nds[1,i],nds[2,i],nds[1,j],nds[2,j],m);
        end
        A = svd(A);
        
        # Define bx and by
        bx = zeros(n);
        by = zeros(n);
        for i ∈ 1:n
            bx[i] = phi_x(nodes[1,k],nodes[2,k],nds[1,i],nds[2,i],m);
            by[i] = phi_y(nodes[1,k],nodes[2,k],nds[1,i],nds[2,i],m);
        end
                       
        
        # Compute Local Weights
        Dx_local = A\bx;
        Dy_local = A\by;

        # Store Weights
        Dx[k, idx[k]] = Dx_local;
        Dy[k, idx[k]] = Dy_local;
    end
    return Dx, Dy
end

## Calculate Normals
function Normals(Dx, Dy)
    N = size(Dx,2);
    f = zeros(N);
    f[trunc(Int,N/2+1):end] .= 1;

    xGrad = (Dx*f);
    yGrad = (Dy*f);
    norms = zeros(2,trunc(Int,N/2));
    for j ∈ 1:trunc(Int,N/2);
        norms[:,j] = [xGrad[j], yGrad[j]]/norm([xGrad[j], yGrad[j]]);
    end
    return norms
end


## Full computes normals with N nodes, n nearest neighbors, and m for a
## shape parameter
function comp(N, n, m)
    ## Defining our curve and true normals
    # Time Coordinate
    t = range(0,2*π-2*π/N, length = N);

    # Compute true norms
    truNorms = [circNormsX(t)'; circNormsY(t)'];

    # Generate nodes
    nodes = dist(circX(t), circY(t));
    
    # Compute background nodes
    tNodes = [nodes outerDist(nodes)];
    
    # RBF Interpolation
    Dx, Dy = populateD(tNodes, n, m);

    calcNorms = Normals(Dx, Dy);

    #a = vectorPlot(nodes,calcNorms);
    #b = spy(Dx);
end

@time comp(1000, 30, .5);
